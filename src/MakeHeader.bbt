REM >MakeHeader
REM
REM Copyright 2020, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM 
REM     http://www.apache.org/licenses/LICENSE-2.0
REM 
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the License for the specific language governing permissions and
REM limitations under the License.

REM Generate a set of ObjASM or AsASM SWI definition headers, based on
REM the AddSWI macro from the RISC OS sources.

REM The handle of the file to be written to.
FileHandle% = 0

REM A global error handler to tidy up the files, report and exit.
ON ERROR PROCclose(FileHandle%) : PRINT REPORT$;" at line ";ERL : END

REM A buffer to hold looked-up SWI names from the OS.
BufferLen% = 255
DIM Buffer% BufferLen% - 1

REM The file to write the header to. The path is extracted from the CLI
REM parameters passed to the program, so that we write the output file
REM to the same folder as the program itself.
REM
REM OutputFilename$ can be replaced by the GCCSDK Makefile.
OutputFilename$ = "SwiHeader"
OutputPathname$ = FNextract_environment

IF OutputPathname$ = "" THEN
	PRINT "Unable to identify location of BASIC program."
	END
ENDIF

Filename$ = OutputPathname$ + OutputFilename$

REM Open a file to write to.
File% = OPENOUT(Filename$)
IF File% = 0 THEN
	PRINT "Failed to open output file"
	END
ENDIF

REM Copy over the file header template, containing the copyright info,
REM fixed macro definitions, and anything else that isn't generated
REM by scanning through the SWI names on the system.
TemplateFilename$ = "HeadTempl"
PROCoutput_template(File%, OutputPathname$ + TemplateFilename$)

REM Set some names for the different groups of SWIs.
DIM Group$(4)
Group$() = "Operating System", "Operating System Extension Module", "Third Party Resident Application", "User Application"

REM Output the SWIs from the OS block. These are in the range &0 to &FF,
REM followed by a blanker OS_WriteI definition covering the range &100 to &1FF.
PROCwrite_spaced_line(File%, "; " + Group$(0) + " SWIs")

PROCoutput_swis(File%, 0, &100)

PROCwrite_spaced_line(File%, "        AddSWI WriteI, &100")

REM Output any more SWIs from OS modules.
PROCwrite_spaced_line(File%, "; " + Group$(0) + " SWI Chunks.")

FOR Base% = &8 TO &7FF
	PROCoutput_swis(File%, Base% * &40, &40)
NEXT Base%

REM Step through the Extension Module, Third Party Module and
REM User Module ranges.
FOR Group% = 1 TO 3
	PROCwrite_spaced_line(File%, "; " + Group$(Group%) + " SWI Chunks.")

	FOR Base% = &0 TO &7FF
		PROCoutput_swis(File%, (Group% * &40000) + (Base% * &40), &40)
	NEXT Base%
NEXT Group%

REM Run through the module area, picking up any modules whose SWI
REM base falls outside of the areas above.
PROCwrite_spaced_line(File%, "; And the rest...")

Module% = 0
Instantiation% = 0

REPEAT
	SYS "XOS_Module",12, Module%, Instantiation% TO ,Module%, Instantiation%, Header% ;Flags%

	IF (Instantiation% = 0) AND ((Flags% AND 1) = 0) THEN
		IF Header%!&1C >= &C0000 THEN PROCoutput_swis(File%, Header%!&1C, &40)
	ENDIF
UNTIL (Flags% AND 1) <> 0

REM Close the file and set its type to Text.
CLOSE#File%
SYS "OS_File", 18, Filename$, &FFF

END


REM Copy the contents of a template file into the output file.
REM
REM \param file%	The handle of the output file.
REM \param header$	The name of the template file to be copied.
DEF PROCoutput_template(file%, header$)
LOCAL handle%, line$
LOCAL ERROR

REM Do nothing if there's no valid output handle.
IF file% = 0 THEN ENDPROC

REM Open the template file for reading.
handle% = OPENIN(header$)
IF handle% = 0 THEN ENDPROC

REM On error, close the template file and leave the caller to
REM sort out the output file.
ON ERROR LOCAL CLOSE#handle% : ENDPROC

REM Copy the template file into the output file, line by line.
WHILE NOT EOF#handle%
	line$ = GET$#handle%
	BPUT#file%, line$
ENDWHILE

REM Close the template file.
CLOSE#handle%
ENDPROC


REM Write a set of consecutive SWI names to the output file, starting
REM at a base SWI number and checking a specified number of calls.
REM
REM \param file%	The handle of the output file.
REM \param base%	The base SWI number to count from.
REM \param count%	The number of SWIs to check.
DEF PROCoutput_swis(file%, base%, count%)
LOCAL swi%, name$, module$, pos%, last%

module$ = ""

FOR swi% = base% TO base% + count% - 1
	SYS "OS_SWINumberToString", swi%, Buffer%, BufferLen%
	SYS "XOS_GenerateError", Buffer% TO name$

	REM Catch the first SWI in a module, and change the value of
	REM the SWIClass global variable.

	pos% = INSTR(name$, "_")

	IF pos% = 0 THEN ENDPROC
	IF module$ <> LEFT$(name$, pos% - 1) THEN
		module$ = LEFT$(name$, pos% - 1)
		PROCwrite_spaced_line(file%, "SWIClass SETS  """ + module$ + """")
	ENDIF

	REM Extract the name of the SWI, which is the name following the underscore.

	name$ = MID$(name$, pos% + 1)

	REM Before outputting the SWI, exclude some special cases.

	CASE TRUE OF

	REM There's no name!
	WHEN name$ = ""

	REM OS SWIs which aren't defined.
	WHEN name$ = "Undefined"

	REM The name is just the SWI index number (eg. "ModSwi_1"). We need a special
	REM case to allow for VAL() returning zero for all non-numeric strings.
	WHEN (VAL(name$) = (swi% - base%)) AND ((name$ = "0") OR (swi% <> base%))

	REM Territory has a load of ReservedN SWIs, which we don't include.
	WHEN (module$ = "Territory") AND (LEFT$(name$, 8) = "Reserved")

	REM If all of the above tests were OK, add the SWI to the file.
	OTHERWISE
		IF (last% + 1) <> swi% THEN PROCwrite_spaced_line(file%, "        ^      &" + STR$~(swi%))
		last% = swi%
		BPUT#file%, "        AddSWI " + LEFT$(name$ + STRING$(32, " "), 32) + "; &" + STR$~(swi%)
	ENDCASE
NEXT swi%
ENDPROC


REM Write a line to the output file, with a single blank line above it.
REM
REM \param file%	The file handle to write to.
REM \param line$	The line to write.
DEF PROCwrite_spaced_line(file%, line$)
IF file% = 0 THEN ENDPROC
BPUT#file%, ""
BPUT#file%, line$
ENDPROC


REM Close the file associated with the supplied handle, if the handle
REM is non-zero, and update the supplied variable to be zero.
REM
REM \param file%	The file handle to close and update.
DEF PROCclose(RETURN file%)
IF file% <> 0 THEN CLOSE#file%
file% = 0
ENDPROC


REM Extract the folder in which the program is being run from the
REM CLI used to launch BASIC.
REM
REM \return		The folder path with trailing ., or "".
DEF FNextract_environment
LOCAL environment$, path$, inset%, next%

REM Read the command line used to call the program.

SYS "OS_GetEnv" TO environment$

REM We're assuming that we're being run by a double-click, and so the
REM command line will start "BASIC -quit ...". If not, we don't go
REM any further.

IF FNextract_next_environment_parameter(environment$) <> "BASIC" THEN =""
IF FNextract_next_environment_parameter(environment$) <> "-quit" THEN =""

REM The filename of our program should be the next parameter on the line.

path$ = FNextract_next_environment_parameter(environment$)
IF path$ = "" THEN =""

REM Find the last . in the line, and remove the leafname. There should be
REM at least one . in the line, otherwise we give up.

inset% = 0

REPEAT
	next% = INSTR(path$, ".", inset%)
	IF next% <> 0 THEN inset% = next% + 1
UNTIL next% = 0

IF inset% = 0 THEN =""

=LEFT$(path$, inset% - 1)


REM Given a CLI command, remove the next parameter chunk from the start
REM of the line and return it, updating the supplied command at the
REM same time.
REM
REM \param environment$	The CLI tail to process and update.
REM \return		The next parameter, or "" for none.
DEF FNextract_next_environment_parameter(RETURN environment$)
LOCAL parameter$, quoted%

quoted% = FALSE

REM Remove any leading spaces.

WHILE (LEN(environment$) > 0) AND (LEFT$(environment$, 1) = " ")
	environment$ = MID$(environment$, 2)
ENDWHILE

REM Extract the next parameter from the line.

WHILE (LEN(environment$) > 0) AND ((LEFT$(environment$, 1) <> " ") OR quoted%)
	IF LEFT$(environment$, 1) = """" THEN
		quoted% = NOT quoted%
	ELSE
		parameter$ += LEFT$(environment$, 1)
	ENDIF

	environment$ = MID$(environment$, 2)
ENDWHILE

=parameter$